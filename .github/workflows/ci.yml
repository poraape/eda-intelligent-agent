# .github/workflows/ci.yml
# Workflow de Integração Contínua para o Agente EDA Inteligente

name: Python Application CI

# Gatilhos: Este workflow será executado em pushes e pull requests para a branch 'main'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # O job 'build' executa os testes em um ambiente Ubuntu limpo
  build:
    runs-on: ubuntu-latest

    steps:
    # Passo 1: Faz o checkout do código do seu repositório
    - name: Checkout repository
      uses: actions/checkout@v4

    # Passo 2: Configura o ambiente Python na versão 3.11
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    # Passo 3: Instala as dependências do projeto
    # Inclui as dependências de produção e de desenvolvimento (pytest)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Passo 4: Executa a suíte de testes usando pytest
    # A variável de ambiente GEMINI_API_KEY é necessária para inicializar
    # a classe do agente, mesmo que a API seja mockada nos testes.
    - name: Run tests with pytest
      run: |
        pytest
      env:
        # Fornecemos uma chave falsa, pois a chamada de API real será mockada
        # durante os testes, mas a variável precisa existir.
        GEMINI_API_KEY: "fake-key-for-testing"